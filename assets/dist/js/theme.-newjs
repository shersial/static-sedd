//tooltip initialize
$(document).ready(function () {
    $('[data-bs-toggle="tooltip"]').tooltip();
});
// invoke the audio-reader javascript library
const $affectedElements = $("html, body, div, span, applet, object, iframe,\n" +
    "h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n" +
    "a, abbr, acronym, address, big, cite, code,\n" +
    "del, dfn, em, img, ins, kbd, q, s, samp,\n" +
    "small, strike, strong, sub, sup, tt, var,\n" +
    "b, u, i, center,\n" +
    "dl, dt, dd, ol, ul, li,\n" +
    "fieldset, form, label, legend,\n" +
    "table, caption, tbody, tfoot, thead, tr, th, td,\n" +
    "article, aside, canvas, details, embed, \n" +
    "figure, figcaption, footer, header, hgroup, \n" +
    "menu, nav, output, ruby, section, summary,\n" +
    "time, mark, audio, video"); // Can be extended, ex. $("div, p, span.someClass")

// Storing the original size in a data attribute so size can be reset
$affectedElements.each(function () {
    const $this = $(this);
    $this.data("default-text-size", $this.css("font-size"));
});

$("#increase_text").click(function () {
    changeFontSize(1);
})

$("#decrease_text").click(function () {
    changeFontSize(-1);
})

$("#default_text").click(function () {
    $affectedElements.each(function () {
        const $this = $(this);
        $this.css("font-size", $this.data("default-text-size"));
    });
})

function changeFontSize(direction) {
    $affectedElements.each(function () {
        const $this = $(this);
        $this.css("font-size", parseInt($this.css("font-size")) + direction);
    });
}

// Text to speech
onload = function () {
    let msg;
    if ('speechSynthesis' in window) with (speechSynthesis) {

        const playEle = document.querySelector('#play');
        const pauseEle = document.querySelector('#pause');
        const stopEle = document.querySelector('#stop');
        let flag = false;

        playEle.addEventListener('click', onClickPlay);
        pauseEle.addEventListener('click', onClickPause);
        stopEle.addEventListener('click', onClickStop);

        function onClickPlay() {
            let utterance;
            if (!flag) {
                flag = true;
                utterance = new SpeechSynthesisUtterance(document.querySelector('p').textContent);
                utterance.voice = getVoices()[0];
                utterance.onend = function () {
                    flag = false;
                    playEle.className = pauseEle.className = '';
                    stopEle.className = 'stopped';
                };
                playEle.className = 'played';
                stopEle.className = '';
                speak(utterance);
            }
            if (paused) { /* unpause/resume narration */
                playEle.className = 'played';
                pauseEle.className = '';
                resume();
            }
        }

        function onClickPause() {
            if (speaking && !paused) { /* pause narration */
                pauseEle.className = 'paused';
                playEle.className = '';
                pause();
            }
        }

        function onClickStop() {
            if (speaking) { /* stop narration */
                /* for safari */
                stopEle.className = 'stopped';
                playEle.className = pauseEle.className = '';
                flag = false;
                cancel();

            }
        }

    }

    else { /* speech synthesis not supported */
        msg = document.createElement('h5');
        msg.textContent = "Detected no support for Speech Synthesis";
        msg.style.textAlign = 'center';
        msg.style.backgroundColor = 'red';
        msg.style.color = 'white';
        msg.style.marginTop = msg.style.marginBottom = 0;
        document.body.insertBefore(msg, document.querySelector('div'));
    }

}



html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center,
dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary,
time, mark, audio, video